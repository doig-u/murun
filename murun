#!/bin/bash
# murun (MUlti RUN) is a tool for run scripts on one or multiple servers.
set -e

TMPDIR=murun-tmp
HOSTS=$1
COMMAND=$2

if [ ! -z $1 ] && [ -f $1 ]; then
    mapfile -t HOSTS < $1
else
    HOSTS=($1)
fi

if [ -z "$HOSTS" ]; then
    echo "ERROR: No hosts or address."
    print_usage=1
fi

if [ -z "$COMMAND" ]; then
    echo "ERROR: No folder/script."
    print_usage=1
fi

if [[ $print_usage == 1 ]]; then
    printf '%s\n' "
Usage: murun hosts|[user@]address[:port] [sudo-user@]folder/script

Args:
- hosts|address - a file with addresses list for ssh or a single host. Default port is 22.
- folder/script - a 'folder' to 'scp' to 'adress:/home/user/$TMPDIR' and then 'sudo -u sudo-user script'. The folder can contain another needed sub-scripts, configs etc. By default the 'sudo-user' is the 'root'. After successful script execution the folder '$TMPDIR' will be removed.

More in README.md.
" | fold -s
    echo
    exit 1
fi

IFS=""
for HOSTS_LINE in ${HOSTS[@]}; do
    if [[ $HOSTS_LINE == \#* ]]; then
        continue
    fi
    
    IFS=':' read -r -a HOSTS_ARR <<< $HOSTS_LINE
    #IFS=$':'
    #HOSTS_ARR=($HOSTS_LINE)
    HOST=${HOSTS_ARR[0]}
    PORT=${HOSTS_ARR[1]:-22}

    IFS='@' read -r -a COMMAND_ARR <<< $COMMAND
    SUDO_USER="root"
    CMD_COMMAND=${COMMAND_ARR[0]}
    if [ ! -z ${COMMAND_ARR[1]} ]; then
        CMD_USER=${COMMAND_ARR[0]}
        CMD_COMMAND=${COMMAND_ARR[1]}
    fi

    SCRIPT=`basename $CMD_COMMAND`
    FOLDER=`dirname $CMD_COMMAND`/
    
    echo
    echo "--- RUN: ssh $HOST -p $PORT sudo ~/$TMPDIR/$FOLDER$SCRIPT ---"
    echo
    
    ssh $HOST -p $PORT bash << EOF
        if [ -d $TMPDIR ]; then
            rm -rf $TMPDIR
        fi
        
        mkdir $TMPDIR
EOF
    
    ssh $HOST -p $PORT "mkdir -p ~/$TMPDIR/$FOLDER"
    scp -P $PORT -r $FOLDER* $HOST:~/$TMPDIR/$FOLDER
    
    ssh -t $HOST -p $PORT "cd ~/$TMPDIR/$FOLDER && sudo -u $SUDO_USER -s ./$SCRIPT" || {
        echo
        echo "--- FAILED: ssh $HOST -p $PORT sudo ~/$TMPDIR/$FOLDER$SCRIPT ---" 
        echo
        exit 1
    }
    
    ssh $HOST -p $PORT bash << EOF
        if [ -d ~/$TMPDIR ]; then
            rm -rf ~/$TMPDIR
        fi
EOF
done

unset IFS

echo

